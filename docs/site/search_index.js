var documenterSearchIndex = {"docs":
[{"location":"index.html#RoadRunner","page":"Home","title":"RoadRunner","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = RoadRunner\r\nDocTestSetup = quote\r\n    using RoadRunner\r\nend","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [RoadRunner]","category":"page"},{"location":"index.html#RoadRunner.addAssignmentRule-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.addAssignmentRule","text":"addAssignmentRule(rr::Ptr{Nothing}, vid::String, formula::String, forceRegen::Bool)\n\nAdd an assignment rule for a variable to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addCompartment-Tuple{Any,String,Float64,Bool}","page":"Home","title":"RoadRunner.addCompartment","text":"addCompartment(rr, cid::String, initVolume::Float64, regen::Bool)\n\nAdd a compartment to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addDelay-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.addDelay","text":"addDelay(rr::Ptr{Nothing}, eid::String, delay::String, forceRegen::Bool)\n\nAdd delay to an existing event in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addDirectory-Tuple{String}","page":"Home","title":"RoadRunner.addDirectory","text":"addDirectory(directory::String) Add a directory in which imported files may be found, and in which to look for a '.antimony' file (which contains rules about where to look locally for imported antimony and sbml files).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addEvent-Tuple{Ptr{Nothing},String,Bool,String,Bool}","page":"Home","title":"RoadRunner.addEvent","text":"addEvent(rr::Ptr{Nothing}, eid::String, useValuesFromTriggerTime::Bool, trigger::String, forceRegen::Bool)\n\nAdd an event to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addEventAssignment-Tuple{Ptr{Nothing},String,String,String,Bool}","page":"Home","title":"RoadRunner.addEventAssignment","text":"addEventAssignment(rr::Ptr{Nothing}, eid::String, vid::String, formulae::String, forceRegen::Bool)\n\nAdd an event assignment to an existing event in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addItem-Tuple{Ptr{RoadRunner.RRList},Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.addItem","text":"addItem(list::Ptr{RRList}, item::Ptr{RRListItem})\n\nCreate a list item to store a double value\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addParameter-Tuple{Ptr{Nothing},String,Float64,Bool}","page":"Home","title":"RoadRunner.addParameter","text":"addParameter(rr::Ptr{Nothing}, pid::String, value::Float64, forceRegen::Bool)\n\nAdd a parameter to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addPriority-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.addPriority","text":"addPriority(rr::Ptr{Nothing}, eid::String, priority::String, forceRegen::Bool)\n\nAdd priority to an existing event in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addRateRule-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.addRateRule","text":"addRateRule(rr::Ptr{Nothing}, vid::String, formula::String, forceRegen::Bool)\n\nAdd a rate rule for a variable to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addReaction-Tuple{Ptr{Nothing},String,Array{String,N} where N,Array{String,N} where N,String,Bool}","page":"Home","title":"RoadRunner.addReaction","text":"addReaction(rr::Ptr{Nothing}, rid::String, reactants::Array{String}, products::Array{String}, kineticLaw::String, regen::Bool)\n\nAdd a reaction to the current model by passing its info as parameters.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addSpecies-Tuple{Ptr{Nothing},String,String,Float64,String,Bool}","page":"Home","title":"RoadRunner.addSpecies","text":"addSpecies(rr::Ptr{Nothing}, sid::String, compartment::String, initialAmount::Float64, substanceUnit::String, regen::Bool)\nexample: addSpecies(rr, s, \"Compartment\", 0.1, \"\", true)\n\nAdd a species to the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.addTrigger-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.addTrigger","text":"addTrigger(rr::Ptr{Nothing}, eid::String, trigger::String, forceRegen::Bool)\n\nAdd trigger to an existing event in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.checkModule-Tuple{String}","page":"Home","title":"RoadRunner.checkModule","text":"checkModule(moduleName::String) Returns 'true' if the submitted module name exists in the current active set, 'false' if not.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.clearDirectories-Tuple{}","page":"Home","title":"RoadRunner.clearDirectories","text":"clearDirectories() Clears the list of directories added with the 'addDirectory' function.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.clearModel-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.clearModel","text":"clearModel(rr::Ptr{Nothing)\n\nUnload current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.clearPreviousLoads-Tuple{}","page":"Home","title":"RoadRunner.clearPreviousLoads","text":"clearPreviousLoads() Clears memory of all files loaded.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.compileSource-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.compileSource","text":"compileSource(rr::Ptr{Nothing}, fName::String)\n\nCompiles source code.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.complexMatrixToString-Tuple{Ptr{RoadRunner.RRComplexMatrix}}","page":"Home","title":"RoadRunner.complexMatrixToString","text":"complexMatrixToString(matrixHandle::Ptr{RRComplexMatrix})\n\nReturns a complex matrix in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.complexVectorToString-Tuple{Ptr{RoadRunner.RRComplexVector}}","page":"Home","title":"RoadRunner.complexVectorToString","text":"complexVectorToString(vecHandle::Ptr{RRComplexVector})\n\nReturns a complex vector in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.computeSteadyStateValues-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.computeSteadyStateValues","text":"computeSteadyStateValues(rr::Ptr{Nothing})\n\nCompute the steady state of the current model. Example: RRVectorHandle values = computeSteadyStateValues (void);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.convertRRVectorToJuliaArray-Tuple{Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.convertRRVectorToJuliaArray","text":"convertRRVectorToJuliaArray(vector::Ptr{RRVector})\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.convertStringArrayToJuliaArray-Tuple{Ptr{RoadRunner.RRStringArray}}","page":"Home","title":"RoadRunner.convertStringArrayToJuliaArray","text":"convertStringArrayToJuliaArray(list::Ptr{RRStringArray})\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createDoubleItem-Tuple{Float64}","page":"Home","title":"RoadRunner.createDoubleItem","text":"createDoubleItem(value::Float64)\n\nCreate a list item to store a double value\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createIntegerItem-Tuple{Int64}","page":"Home","title":"RoadRunner.createIntegerItem","text":"createIntegerItem(value::Int64)\n\nCreate a list item to store an integer.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createListItem-Tuple{Ptr{RoadRunner.RRList}}","page":"Home","title":"RoadRunner.createListItem","text":"createListItem(value::Ptr{RRList})\n\nCreate a list item to store a list.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createRRInstance-Tuple{}","page":"Home","title":"RoadRunner.createRRInstance","text":"createRRInstance()\n\nInitialize  and return a new roadRunner instances.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createRRInstanceEx-Tuple{String,String}","page":"Home","title":"RoadRunner.createRRInstanceEx","text":"createRRInstanceEx(tempFolder::String, compiler_cstr::String)\n\nInitialize  and return a new roadRunner instance.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createRRList-Tuple{}","page":"Home","title":"RoadRunner.createRRList","text":"createRRList()\n\nCreate a new list. A list is a container for storing list items. List items can represent integers, double, strings and lists. To populate a list, create list items of the appropriate type and add them to the list Example, build the list [123, [3.1415926]]     1 l = createRRList(RRHandle handle);     2 item = createIntegerItem (123);     3 addItem (l, item);     4 item1 = createListItem(RRHandle handle);     5 item2 = createDoubleItem (3.1415926);     6 addItem (item1, item2);     7 addItem (l, item1);     8     9 item = getListItem (l, 0);    10 printf (\"item = %d \", item->data.iValue);    11    12 printf (listToString (l));    13 freeRRList (l);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createRRMatrix-Tuple{Int64,Int64}","page":"Home","title":"RoadRunner.createRRMatrix","text":"createRRMatrix(r::Int64, c::Int64)\n\nCreate an empty matrix of size r by c.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createStringItem-Tuple{String}","page":"Home","title":"RoadRunner.createStringItem","text":"createStringItem(value::String)\n\nCreate a list item to store a pointer to a string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createText-Tuple{String}","page":"Home","title":"RoadRunner.createText","text":"createText(text::String)\n\nCreates memory for holding a string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createTextMemory-Tuple{Int64}","page":"Home","title":"RoadRunner.createTextMemory","text":"createTextMemory(count::Int64)\n\nCreates memory for holding a string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.createVector-Tuple{Int64}","page":"Home","title":"RoadRunner.createVector","text":"createVector(size::Int64)\n\nCreate a new vector with a given size.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.disableLoggingToConsole-Tuple{}","page":"Home","title":"RoadRunner.disableLoggingToConsole","text":"disableLoggingToConsole()\n\nDisable logging to console.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.disableLoggingToFile-Tuple{}","page":"Home","title":"RoadRunner.disableLoggingToFile","text":"disableLoggingToFile()\n\nDisable logging to logFile.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.enableLoggingToConsole-Tuple{}","page":"Home","title":"RoadRunner.enableLoggingToConsole","text":"enableLoggingToConsole()\n\nEnable logging to console.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.enableLoggingToFile-Tuple{}","page":"Home","title":"RoadRunner.enableLoggingToFile","text":"enableLoggingToFile()\n\nEnable logging to logFile.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.enableLoggingToFileWithPath-Tuple{String}","page":"Home","title":"RoadRunner.enableLoggingToFileWithPath","text":"enableLoggingToFileWithPath(path::String)\n\nEnable logging to a log file with the specified path.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.evalModel-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.evalModel","text":"evalModel(rr::Ptr{Nothing})\n\nEvaluate the current model, that it update all assignments and rates of change. Do not carry out an integration step.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeAll-Tuple{}","page":"Home","title":"RoadRunner.freeAll","text":"freeAll() Frees all pointers handed to you by libAntimony.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeMatrix-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.freeMatrix","text":"freeMatrix(matrix::Ptr{RRDoubleMatrix})\n\nFree RRDoubleMatrixPtr structures.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeRRCData-Tuple{Ptr{RoadRunner.RRCData}}","page":"Home","title":"RoadRunner.freeRRCData","text":"freeRRCData(handle::Ptr{RRCData})\n\nFree the memory associated to a RRCData object.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeRRInstance-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.freeRRInstance","text":"freeRRInstance(rr::Ptr{Nothing})\n\nFree the roadRunner instance.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeRRList-Tuple{Any}","page":"Home","title":"RoadRunner.freeRRList","text":"freeRRList(theList)\n\nFree RRListPtr structure, i.e destroy a list.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeStringArray-Tuple{Ptr{RoadRunner.RRStringArray}}","page":"Home","title":"RoadRunner.freeStringArray","text":"freeStringArray(sl::Ptr{RRStringArray})\n\nFree RRStringListHandle structures\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freeVector-Tuple{Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.freeVector","text":"freeVector(vector::Ptr{RRVector})\n\nFree RRVectorHandle structures.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.freetext-Tuple{Ptr{UInt8}}","page":"Home","title":"RoadRunner.freetext","text":"freetext(text::Ptr{UInt8})\n\nFree char* generated by library routines.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getAPIVersion-Tuple{}","page":"Home","title":"RoadRunner.getAPIVersion","text":"getAPIVersion()\n\nRetrieve the current version number of the C API library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getAntimonyString-Tuple{String}","page":"Home","title":"RoadRunner.getAntimonyString","text":"getAntimonyString(moduleName::String) Returns the same output as writeAntimonyFile, but to a char* array instead of to a file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getAvailableSteadyStateSymbols-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getAvailableSteadyStateSymbols","text":"getAvailableSteadyStateSymbols(rr::Ptr{Nothing})\n\nObtain the list of all available steady state symbols.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getAvailableTimeCourseSymbols-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getAvailableTimeCourseSymbols","text":"getAvailableTimeCourseSymbols(rr::Ptr{Nothing})\n\nObtain the list of all available symbols.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBoundarySpeciesByIndex-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getBoundarySpeciesByIndex","text":"getBoundarySpeciesByIndex(rr::Ptr{Nothing}, index::Int64)\n\nRetrieve the concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBoundarySpeciesConcentrations-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getBoundarySpeciesConcentrations","text":"getBoundarySpeciesConcentrations(rr::Ptr{Nothing})\n\nRetrieve the concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBoundarySpeciesIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getBoundarySpeciesIds","text":"getBoundarySpeciesIds(rr::Ptr{Nothing})\n\nObtain the list of boundary species Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBuildDate-Tuple{}","page":"Home","title":"RoadRunner.getBuildDate","text":"getBuildDate()\n\nRetrieve the current build date of the library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBuildDateTime-Tuple{}","page":"Home","title":"RoadRunner.getBuildDateTime","text":"getBuildDateTime()\n\nRetrieve the current build date + time of the library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getBuildTime-Tuple{}","page":"Home","title":"RoadRunner.getBuildTime","text":"getBuildTime()\n\nRetrieve the current build time (HH:MM:SS) of the library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCC-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.getCC","text":"getCC(rr::Ptr{Nothing}, variable::String, parameter::String)\n\nRetrieve a single control coefficient.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCPPAPIVersion-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCPPAPIVersion","text":"getCPPAPIVersion(rr::Ptr{Nothing})\n\nRetrieve the current version number of the C++ API (Core RoadRunner API) library..\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCellMLString-Tuple{String}","page":"Home","title":"RoadRunner.getCellMLString","text":"getCellMLString(moduleName::String) Writes out a CellML-formatted XML file to the file indicated, retaining the same Antimony hierarchy using the CellML 'component' hieararchy.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCompSBMLString-Tuple{String}","page":"Home","title":"RoadRunner.getCompSBMLString","text":"getCompSBMLString(moduleName::String) Returns the same output as writeSBMLFile, but to a char* array instead of to a file, using the 'Hierarchichal Model Composition' package.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCompartmentByIndex-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCompartmentByIndex","text":"getCompartmentByIndex(rr::Ptr{Nothing}, index::Int64)\n\nRetrieve the compartment volume for a particular compartment.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCompartmentIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCompartmentIds","text":"getCompartmentIds(rr::Ptr{Nothing})\n\nObtain the list of compartment Ids. Example: str = getCompartmentIds (RRHandle handle);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCompiler-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCompiler","text":"getCompiler(rr::Ptr{Nothing}))\n\nGet the name of the compiler currently being used by roadrunner.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCompilerLocation-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCompilerLocation","text":"getCompilerLocation(rr::Ptr{Nothing})\n\nGet the path to a folder containing the compiler being used. Returns the path if successful, NULL otherwise\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getComplexMatrixElement-Tuple{Ptr{RoadRunner.RRComplexMatrix},Int64,Int64}","page":"Home","title":"RoadRunner.getComplexMatrixElement","text":"getComplexMatrixElement(m::Ptr{RRComplexMatrix}, r::Int64, c::Int64)\n\nRetrieve an element at a given row and column from a complex matrix type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConcentrationControlCoefficientIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getConcentrationControlCoefficientIds","text":"getConcentrationControlCoefficientIds(rr::Ptr{Nothing})\n\nObtain the list of concentration coefficient Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConfigBool-Tuple{String}","page":"Home","title":"RoadRunner.getConfigBool","text":"getConfigBool(key::String)\n\nGet a boolean configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConfigDouble-Tuple{String}","page":"Home","title":"RoadRunner.getConfigDouble","text":"getConfigDouble(key::String)\n\nGet a double configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConfigInt-Tuple{String}","page":"Home","title":"RoadRunner.getConfigInt","text":"getConfigInt(key::String)\n\nGet an integer configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConfigurationXML-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getConfigurationXML","text":"getConfigurationXML(rr::Ptr{Nothing})\n\nGet the simulator's capabilities.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConservationMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getConservationMatrix","text":"getConservationMatrix(rr::Ptr{Nothing})\n\nRetrieve the conservation matrix for the current model. The conservation laws as describe by row where the columns indicate the species Id.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getConservedSums-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getConservedSums","text":"getConservedSums(rr::Ptr{Nothing})\n\nReturn values for conservation laws using the current initial conditions.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCopyright-Tuple{}","page":"Home","title":"RoadRunner.getCopyright","text":"getCopyright()\n\nRetrieve the current copyright notice for the library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorDescription-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentIntegratorDescription","text":"getCurrentIntegratorDescription(rr::Ptr{Nothing})\n\nObtain a description of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorHint-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentIntegratorHint","text":"ggetCurrentIntegratorHint(rr::Ptr{Nothing})\n\nObtain a short hint for the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorName-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentIntegratorName","text":"getCurrentIntegratorName(rr::Ptr{Nothing})\n\nObtain a description of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorNthParameterDescription-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentIntegratorNthParameterDescription","text":"getCurrentIntegratorNthParameterDescription(rr::Ptr{Nothing}, n::Int64)\n\nGet the description for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorNthParameterDisplayName-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentIntegratorNthParameterDisplayName","text":"getCurrentIntegratorNthParameterDisplayName(rr::Ptr{Nothing}, n::Int64)\n\nGet the display name of a parameter of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorNthParameterHint-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentIntegratorNthParameterHint","text":"getCurrentIntegratorNthParameterHint(rr::Ptr{Nothing}, n::Int64)\n\nGet the hint of a parameter of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorNthParameterName-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentIntegratorNthParameterName","text":"getCurrentIntegratorNthParameterName(rr::Ptr{Nothing}, n::Int64)\n\nGet the name of a parameter of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorNthParameterType-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentIntegratorNthParameterType","text":"getCurrentIntegratorNthParameterType(rr::Ptr{Nothing}, n::Int64)\n\nGet the type of a parameter of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterBoolean-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterBoolean","text":"getCurrentIntegratorParameterBoolean(rr::Ptr{Nothing}, parameterName::String)\n\nGet the boolean value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterDescription-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterDescription","text":"getCurrentIntegratorParameterDescription(rr::Ptr{Nothing}, parameterName::String)\n\nGet the names of adjustable settings for the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterDouble-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterDouble","text":"getCurrentIntegratorParameterDouble(rr::Ptr{Nothing}, parameterName::String)\n\nGet the double value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterHint-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterHint","text":"getCurrentIntegratorParameterHint(rr::Ptr{Nothing}, parameterName::String)\n\nGet the hint for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterInt-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterInt","text":"getCurrentIntegratorParameterInt(rr::Ptr{Nothing}, parameterName::String)\n\nGet the integer value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterString-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterString","text":"getCurrentIntegratorParameterString(rr::Ptr{Nothing}, parameterName::String)\n\nGet the string value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterType-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterType","text":"getCurrentIntegratorParameterType(rr::Ptr{Nothing}, parameterName::String)\n\nGet the return type for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentIntegratorParameterUInt-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentIntegratorParameterUInt","text":"getCurrentIntegratorParameterUInt(rr::Ptr{Nothing}, parameterName::String)\n\nGet the unsigned integer value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSBML-Tuple{Any}","page":"Home","title":"RoadRunner.getCurrentSBML","text":"getCurrentSBM(handle::Ptr{Nothing})\n\nRetrieve the current state of the model in the form of an SBML string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverDescription-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverDescription","text":"getCurrentSteadyStateSolverDescription(rr::Ptr{Nothing})\n\nObtain a description of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverHint-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverHint","text":"getCurrentSteadyStateSolverHint(rr::Ptr{Nothing})\n\nObtain a short hint for the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverName-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverName","text":"getCurrentSteadyStateSolverName(rr::Ptr{Nothing})\n\nObtain a description of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverNthParameterDescription-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverNthParameterDescription","text":"getCurrentSteadyStateSolverNthParameterDescription(rr::Ptr{Nothing}, n::Int64)\n\nGet the description of a parameter of the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverNthParameterDisplayName-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverNthParameterDisplayName","text":"getCurrentSteadyStateSolverNthParameterDisplayName(rr::Ptr{Nothing}, n::Int64)\n\nGet the display name of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverNthParameterHint-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverNthParameterHint","text":"getCurrentSteadyStateSolverNthParameterHint(rr::Ptr{Nothing}, n::Int64)\n\nGet the hint of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverNthParameterName-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverNthParameterName","text":"getCurrentSteadyStateSolverNthParameterName(rr::Ptr{Nothing}, n::Int64)\n\nGet the name of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverNthParameterType-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverNthParameterType","text":"getCurrentSteadyStateSolverNthParameterType(rr::Ptr{Nothing}, n::Int64)\n\nGet the type of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterBoolean-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterBoolean","text":"getCurrentSteadyStateSolverParameterBoolean(rr::Ptr{Nothing}, parameterName::String)\n\nGet the boolean value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterDescription-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterDescription","text":"getCurrentSteadyStateSolverParameterDescription(rr::Ptr{Nothing}, parameterName::String)\n\nGGet the description for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterDouble-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterDouble","text":"getCurrentSteadyStateSolverParameterDouble(rr::Ptr{Nothing}, parameterName::String)\n\nGet the double value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterHint-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterHint","text":"getCurrentSteadyStateSolverParameterHint(rr::Ptr{Nothing}, parameterName::String)\n\nGet the hint of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterInt-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterInt","text":"getCurrentSteadyStateSolverParameterInt(rr::Ptr{Nothing}, parameterName::String)\n\nGet the integer value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterString-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterString","text":"getCurrentSteadyStateSolverParameterString(rr::Ptr{Nothing}, parameterName::String)\n\nGet the double value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterType-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterType","text":"getCurrentSteadyStateSolverParameterType(rr::Ptr{Nothing}, parameterName::String)\n\nGet the type of a parameter of the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getCurrentSteadyStateSolverParameterUInt-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getCurrentSteadyStateSolverParameterUInt","text":"getCurrentSteadyStateSolverParameterUInt(rr::Ptr{Nothing}, parameterName::String)\n\nGet the unsigned integer value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getDoubleListItem-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.getDoubleListItem","text":"getDoubleListItem(item::Ptr{RRListItem})\n\nReturn the double from a list item.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEE-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.getEE","text":"getEE(rr::Ptr{Nothing}, name::String, species::String)\n\nRetrieve a single elasticity coefficient.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEigenVectors-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.getEigenVectors","text":"getEigenVectors(matrix::Ptr{RRDoubleMatrix})\n\nCalculate the eigen-vectors of a square real matrix. This function calculates the complex (right)eigenvectors of the given real matrix. The complex matrix returned contains the eigenvectors in the columns, in the same order as LibLA_getEigenValues. The right eigenvector v(j) of A satisfies: A * v(j) = lambda(j) * v(j)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEigenvalueIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getEigenvalueIds","text":"getEigenvalueIds(rr::Ptr{Nothing})\n\nObtain the list of eigenvalue Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEigenvalues-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getEigenvalues","text":"getEigenvalues(rr::Ptr{Nothing})\n\nRetrieve the eigenvalue matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEigenvaluesMatrix-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.getEigenvaluesMatrix","text":"getEigenvaluesMatrix(mat::Ptr{RRDoubleMatrix})\n\nCompute the eigenvalues of a double matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getEigenvaluesVector-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.getEigenvaluesVector","text":"getEigenvaluesVector(mat::Ptr{RRDoubleMatrix})\n\nCompute the eigenvalues of a double matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getElasticityCoefficientIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getElasticityCoefficientIds","text":"getElasticityCoefficientIds(rr::Ptr{Nothing})\n\nObtain the list of elasticity coefficient Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getExtendedAPIInfo-Tuple{}","page":"Home","title":"RoadRunner.getExtendedAPIInfo","text":"getExtendedAPIInfo()\n\nRetrieve extended API info. Returns null if it fails, otherwise it returns a string with the info.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFileContent-Tuple{String}","page":"Home","title":"RoadRunner.getFileContent","text":"getFileContent(fName::String)\n\nRetrieves the the content of a file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesByIndex-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getFloatingSpeciesByIndex","text":"getFloatingSpeciesByIndex(rr::Ptr{Nothing}, index::Int64)\n\nRetrieve the concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesConcentrations-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFloatingSpeciesConcentrations","text":"getFloatingSpeciesConcentrations(rr::Ptr{Nothing})\n\nRetrieve in a vector the concentrations for all the floating species. Example:  RVectorPtr values = getFloatingSpeciesConcentrations (void);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFloatingSpeciesIds","text":"getFloatingSpeciesIds(rr::Ptr{Nothing})\n\nObtain the list of floating species Id.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesInitialConcentrationByIndex-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getFloatingSpeciesInitialConcentrationByIndex","text":"getFloatingSpeciesInitialConcentrationByIndex(rr::Ptr{Nothing}, index::Int64)\n\nGet the initial concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesInitialConcentrations-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFloatingSpeciesInitialConcentrations","text":"getFloatingSpeciesInitialConcentrations(rr::Ptr{Nothing})\n\nGet the initial floating species concentrations. Example: vec = getFloatingSpeciesInitialConcentrations (RRHandle handle);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFloatingSpeciesInitialConditionIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFloatingSpeciesInitialConditionIds","text":"getFloatingSpeciesInitialConditionIds(rr::Ptr{Nothing})\n\nGet the initial floating species Ids. Example: vec = getFloatingSpeciesInitialConditionIds (RRHandle handle);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFluxControlCoefficientIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFluxControlCoefficientIds","text":"getFluxControlCoefficientIds(rr::Ptr{Nothing})\n\nObtain the list of flux control coefficient Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getFullJacobian-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getFullJacobian","text":"getFullJacobian(rr::Ptr{Nothing})\n\nRetrieve the full Jacobian for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getGlobalParameterByIndex-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getGlobalParameterByIndex","text":"getGlobalParameterByIndex(rr::Ptr{Nothing}, index::Int64)\n\nRetrieve the global parameter value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getGlobalParameterIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getGlobalParameterIds","text":"getGlobalParameterIds(rr::Ptr{Nothing})\n\nObtain the list of global parameter Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getGlobalParameterValues-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getGlobalParameterValues","text":"getGlobalParameterValues(rr::Ptr{Nothing})\n\nRetrieve the global parameter value. Example: RRVectorPtr values = getGlobalParameterValues (void);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getInfo-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getInfo","text":"getInfo(rr::Ptr{Nothing})\n\nRetrieve the current version number of the libSBML library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getInstallFolder-Tuple{}","page":"Home","title":"RoadRunner.getInstallFolder","text":"getInstallFolder()\n\nReturn the folder in which the RoadRunner API is installed.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getIntegerListItem-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.getIntegerListItem","text":"getIntegerListItem(item::Ptr{RRListItem})\n\nReturn the integer from a list item.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getL0Matrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getL0Matrix","text":"getL0Matrix(rr::Ptr{Nothing})\n\nReturn the L0 Matrix. L0 is defined such that L0 Nr = N0. L0 forms part of the link matrix, L. N0 is the set of linear dependent rows from the lower portion of the reordered stoichiometry matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getLastError-Tuple{}","page":"Home","title":"RoadRunner.getLastError","text":"getLastError()\n\nRetrieve the current error string. Example, str = getLastError (void);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getLinkMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getLinkMatrix","text":"getLinkMatrix(rr::Ptr{Nothing})\n\nRetrieve the Link matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getList-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.getList","text":"getList(item::Ptr{RRListItem})\n\nReturn a list from a list item if it contains a list.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getListItem-Tuple{Ptr{RoadRunner.RRList},Int64}","page":"Home","title":"RoadRunner.getListItem","text":"getListItem(list::Ptr{RRList}, index::Int64)\n\nReturn the index^th item from the list.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getListLength-Tuple{Any}","page":"Home","title":"RoadRunner.getListLength","text":"getListLength(myList)\n\nReturns the length of a given list.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getListOfConfigKeys-Tuple{}","page":"Home","title":"RoadRunner.getListOfConfigKeys","text":"getListOfConfigKeys()\n\nGet a list of all possible config keys.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getListOfCurrentIntegratorParameterNames-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getListOfCurrentIntegratorParameterNames","text":"getListOfCurrentIntegratorParameterNames(rr::Ptr{Nothing})\n\nGet the names of adjustable settings for the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getListOfCurrentSteadyStateSolverParameterNames-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getListOfCurrentSteadyStateSolverParameterNames","text":"getListOfCurrentSteadyStateSolverParameterNames(rr::Ptr{Nothing})\n\nGet the names of adjustable settings for the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getLogFileName-Tuple{}","page":"Home","title":"RoadRunner.getLogFileName","text":"getLogFileName()\n\nGet a pointer to the string that holds the logging file name path. Example: str = getLogFileName (void)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getLogLevel-Tuple{}","page":"Home","title":"RoadRunner.getLogLevel","text":"getLogLevel()\n\nGet the logging status level as a pointer to a string. The logging level can be one of the following strings \"ANY\", \"DEBUG5\", \"DEBUG4\", \"DEBUG3\", \"DEBUG2\", \"DEBUG1\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\" Example str = getLogLevel (void)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getMainModuleName-Tuple{}","page":"Home","title":"RoadRunner.getMainModuleName","text":"getMainModuleName() Returns the 'main' module name.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getMatrixElement-Tuple{Ptr{RoadRunner.RRDoubleMatrix},Int64,Int64}","page":"Home","title":"RoadRunner.getMatrixElement","text":"getMatrixElement(m::Ptr{RRDoubleMatrix}, r::Int64, c::Int64)\n\nRetrieve an element at a given row and column from a matrix type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getMatrixNumCols-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.getMatrixNumCols","text":"getMatrixNumCols(m::Ptr{RRDoubleMatrix})\n\nRetrieve the number of columns in the given matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getMatrixNumRows-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.getMatrixNumRows","text":"getMatrixNumRows(m::Ptr{RRDoubleMatrix})\n\nRetrieve the number of rows in the given matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getModelName-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getModelName","text":"getModelName(rr::Ptr{Nothing})\n\nReturn the name of currently loaded SBML model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getModuleNames-Tuple{}","page":"Home","title":"RoadRunner.getModuleNames","text":"getModuleNames() Returns an array of all the current module names.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNrMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNrMatrix","text":"getNrMatrix(rr::Ptr{Nothing})\n\nRetrieve the reduced stoichiometry matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNthModuleName-Tuple{Int64}","page":"Home","title":"RoadRunner.getNthModuleName","text":"getNthModuleName(n::Int64) Returns the nth module name.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumFiles-Tuple{}","page":"Home","title":"RoadRunner.getNumFiles","text":"getNumFiles() Returns the number of files loaded into memory so far.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumInstantiatedIntegrators-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumInstantiatedIntegrators","text":"getNumInstantiatedIntegrators(rr::Ptr{Nothing})\n\nGet the number of instantiated integrators. To instantiate an integrator, use setCurrentIntegrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumModules-Tuple{}","page":"Home","title":"RoadRunner.getNumModules","text":"getNumModules() Returns the number of modules in the current active set (the last file successfully loaded, or whichever file was returned to with 'revertTo').\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumPoints-Tuple{Any}","page":"Home","title":"RoadRunner.getNumPoints","text":"getNumPoints(rr)\n\nGet the value of the current number of points. Example: status = getNumPoints (rrHandle, &numberOfPoints);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumRegisteredIntegrators-Tuple{}","page":"Home","title":"RoadRunner.getNumRegisteredIntegrators","text":"getNumRegisteredIntegrators()\n\nGet the number of registered integrators.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumRegisteredSteadyStateSolvers-Tuple{}","page":"Home","title":"RoadRunner.getNumRegisteredSteadyStateSolvers","text":"getNumRegisteredSteadyStateSolvers()\n\nGet the number of registered steady state solvers.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfBoundarySpecies-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfBoundarySpecies","text":"getNumberOfBoundarySpecies(rr::Ptr{Nothing})\n\nReturn the number of boundary species in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfCompartments-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfCompartments","text":"getNumberOfCompartments(rr::Ptr{Nothing})\n\nReturn the number of compartments in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfCurrentIntegratorParameters-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfCurrentIntegratorParameters","text":"getNumberOfCurrentIntegratorParameters(rr::Ptr{Nothing})\n\nGet the number of adjustable settings for the current integrator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfCurrentSteadyStateSolverParameters-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfCurrentSteadyStateSolverParameters","text":"getNumberOfCurrentSteadyStateSolverParameters(rr::Ptr{Nothing})\n\nGet the number of adjustable settings for the current steady state solver.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfDependentSpecies-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfDependentSpecies","text":"getNumberOfDependentSpecies(rr::Ptr{Nothing})\n\nReturn the number of dependent species in the mode.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfFloatingSpecies-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfFloatingSpecies","text":"getNumberOfFloatingSpecies(rr::Ptr{Nothing})\n\nReturn the number of floating species in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfGlobalParameters-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfGlobalParameters","text":"getNumberOfGlobalParameters(rr::Ptr{Nothing})\n\nReturn the number of global parameters in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfIndependentSpecies-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfIndependentSpecies","text":"getNumberOfIndependentSpecies(rr::Ptr{Nothing})\n\nReturn the number of independent species in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfReactions-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfReactions","text":"getNumberOfReactions(rr::Ptr{Nothing})\n\nObtain the number of reactions in the loaded model. Example: number = getNumberOfReactions (RRHandle handle);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfRules-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getNumberOfRules","text":"getNumberOfRules(rr::Ptr{Nothing})\n\nReturn the number of rules in the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getNumberOfStringElements-Tuple{Ptr{RoadRunner.RRStringArray}}","page":"Home","title":"RoadRunner.getNumberOfStringElements","text":"getNumberOfStringElements(list::Ptr{RRStringArray})\n\nReturns the length of a string array.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getParamPromotedSBML-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getParamPromotedSBML","text":"getParamPromotedSBML(rr::Ptr{Nothing}, sArg::String)\n\nPromote any local parameters to global status.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRRCAPILocation-Tuple{}","page":"Home","title":"RoadRunner.getRRCAPILocation","text":"getRRCAPILocation()\n\nRetrieve the directory path of the shared rrCApi library.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRRCDataElement-Tuple{Ptr{RoadRunner.RRCData},Int64,Int64}","page":"Home","title":"RoadRunner.getRRCDataElement","text":"function getRRCDataElement(rrData::Ptr{RRCData}, r::Int64, c::Int64)\n\nRetrieves an element at a given row and column from a RoadRunner data type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRRDataColumnLabel-Tuple{Ptr{RoadRunner.RRCData},Int64}","page":"Home","title":"RoadRunner.getRRDataColumnLabel","text":"getRRDataColumnLabel(rrData::Ptr{RRCData}, column::Int64)\n\nRetrieves a label for a given column in a rrData type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRRDataNumCols-Tuple{Ptr{RoadRunner.RRCData}}","page":"Home","title":"RoadRunner.getRRDataNumCols","text":"getRRDataNumCols(rrData::Ptr{RRCData})\n\nRetrieve the number of columns in the given RoadRunner numerical data (returned from simulate(RRHandle handle))\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRRDataNumRows-Tuple{Ptr{RoadRunner.RRCData}}","page":"Home","title":"RoadRunner.getRRDataNumRows","text":"getRRDataNumRows(rrData::Ptr{RRCData})\n\nRetrieve the number of rows in the given RoadRunner numerical data (returned from simulate(RRHandle handle))\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRateOfChange-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getRateOfChange","text":"getRatesOfChange(rr::Ptr{Nothing}, index::Int64)\n\nRetrieve the rate of change for a given floating species. Example: status = getRateOfChange (&index, *value);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRatesOfChange-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getRatesOfChange","text":"getRatesOfChange(rr::Ptr{Nothing})\n\nRetrieve the vector of rates of change as determined by the current state of the model. Example: values = getRatesOfChange (RRHandle handle);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRatesOfChangeEx-Tuple{Ptr{Nothing},Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.getRatesOfChangeEx","text":"getRatesOfChangeEx(rr::Ptr{Nothing}, vec::Ptr{RRVector})\n\nRetrieve the vector of rates of change given a vector of floating species concentrations. Example: values = getRatesOfChangeEx (vector);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRatesOfChangeIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getRatesOfChangeIds","text":"getRatesOfChange(rr::Ptr{Nothing})\n\nRetrieve the rate of change for a given floating species. Example: status = getRateOfChange (&index, *value);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getReactionIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getReactionIds","text":"getReactionIds(rr::Ptr{Nothing})\n\nObtain the list of reaction Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getReactionRate-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.getReactionRate","text":"getReactionRate(rr::Ptr{Nothing}, idx::Int64)\n\nRetrieve a give reaction rate as indicated by the index paramete.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getReactionRates-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getReactionRates","text":"getReactionRates(rr::Ptr{Nothing})\n\nRetrieve a vector of reaction rates as determined by the current state of the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getReactionRatesEx-Tuple{Ptr{Nothing},Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.getReactionRatesEx","text":"getReactionRatesEx(rr::Ptr{Nothing}, vec::Ptr{RRVector})\n\nRetrieve a vector of reaction rates given a vector of species concentrations.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getReducedJacobian-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getReducedJacobian","text":"getReducedJacobian(rr::Ptr{Nothing})\n\nRetrieve the reduced Jacobian for the current model. setComputeAndAssignConservationLaws (true) must be enabled\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredIntegratorDescription-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredIntegratorDescription","text":"getRegisteredIntegratorDescription(n::Int64)\n\nGet the description of a registered integrator (e.g. cvode etc.).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredIntegratorHint-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredIntegratorHint","text":"getRegisteredIntegratorHint(n::Int64)\n\nGet the hint of a registered integrator (e.g. cvode etc.)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredIntegratorName-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredIntegratorName","text":"getRegisteredIntegratorName(n::Int64)\n\nGet the name of a registered integrator (e.g. cvode etc.)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredSteadyStateSolverDescription-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredSteadyStateSolverDescription","text":"getRegisteredSteadyStateSolverDescription(n::Int64)\n\nGet the description of a registered steady state solver (e.g. cvode etc.)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredSteadyStateSolverHint-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredSteadyStateSolverHint","text":"getRegisteredSteadyStateSolverHint(n::Int64)\n\nGet the hint of a registered steady state solver (e.g. cvode etc.)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getRegisteredSteadyStateSolverName-Tuple{Int64}","page":"Home","title":"RoadRunner.getRegisteredSteadyStateSolverName","text":"getRegisteredSteadyStateSolverName(n::Int64)\n\nGet the name of a registered steady state solver (e.g. cvode etc.)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSBML-Tuple{Any}","page":"Home","title":"RoadRunner.getSBML","text":"getSBML(rr::Ptr{Nothing})\n\nRetrieve the SBML model that was last loaded into roadRunner.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSBMLInfoMessages-Tuple{String}","page":"Home","title":"RoadRunner.getSBMLInfoMessages","text":"getSBMLInfoMessages(moduleName::String) Returns the 'info' messages from libSBML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSBMLString-Tuple{String}","page":"Home","title":"RoadRunner.getSBMLString","text":"getSBMLString(moduleName::String) Returns the same output as writeSBMLFile, but to a char* array instead of to a file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSBMLWarnings-Tuple{String}","page":"Home","title":"RoadRunner.getSBMLWarnings","text":"getSBMLWarnings(moduleName::String) Returns the 'warning' messages from libSBML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getScaledConcentrationControlCoefficientMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getScaledConcentrationControlCoefficientMatrix","text":"getScaledConcentrationControlCoefficientMatrix(rr::Ptr{Nothing})\n\nRetrieve the matrix of scaled concentration control coefficients for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getScaledElasticityMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getScaledElasticityMatrix","text":"getScaledElasticityMatrix(rr::Ptr{Nothing})\n\nRetrieve the scaled elasticity matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getScaledFloatingSpeciesElasticity-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.getScaledFloatingSpeciesElasticity","text":"getScaledFloatingSpeciesElasticity(rr::Ptr{Nothing}, reactionId::String, speciesId::String)\n\nRetrieve the scaled elasticity matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getScaledFluxControlCoefficientMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getScaledFluxControlCoefficientMatrix","text":"getScaledFluxControlCoefficientMatrix(rr::Ptr{Nothing})\n\nRetrieve the matrix of scaled flux control coefficients for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSeed-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getSeed","text":"getSeed(rr::Ptr{Nothing})\n\nDetermine the current seed used by the random generator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSimulationResult-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getSimulationResult","text":"getSimulationResult(rr::Ptr{Nothing})\n\nRetrieve the result of the last simulation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSteadyStateSelectionList-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getSteadyStateSelectionList","text":"getSteadyStateSelectionList(rr::Ptr{Nothing})\n\nGet the selection list for the steady state analysis.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getStoichiometryMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getStoichiometryMatrix","text":"getStoichiometryMatrix(rr::Ptr{Nothing})\n\nRetrieve the stoichiometry matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getStringElement-Tuple{Ptr{RoadRunner.RRStringArray},Int64}","page":"Home","title":"RoadRunner.getStringElement","text":"getStringElement(list::Ptr{RRStringArray}, index::Int64)\n\nReturns the indexth element from the string array in the argument value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getStringListItem-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.getStringListItem","text":"getStringListItem(item::Ptr{RRListItem})\n\nReturn the string from a list item.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getSupportCodeFolder-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getSupportCodeFolder","text":"getSupportCodeFolder(rr::Ptr{Nothing})\n\nGet the path to a folder containing support code.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getTempFolder-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getTempFolder","text":"getTempFolder(rr::Ptr{Nothing})\n\nRetrieve the current temporary folder path. When RoadRunner is run in C generation mode it uses a temporary folder to store the generate C source code. This method can be used to get the current value for the temporary folder path.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getTimeCourseSelectionList-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getTimeCourseSelectionList","text":"getTimeCourseSelectionList(rr::Ptr{Nothing})\n\nGet the current selection list for simulate(void) or simulateEx(void).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getTimeEnd-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getTimeEnd","text":"getTimeEnd(rr::Ptr{Nothing})\n\nGet the value of the current time end. Example: status = getTimeEnd (rrHandle, &timeEnd);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getTimeStart-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getTimeStart","text":"getTimeStart(rr::Ptr{Nothing})\n\nGet the value of the current time start.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getUnscaledConcentrationControlCoefficientIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getUnscaledConcentrationControlCoefficientIds","text":"getUnscaledConcentrationControlCoefficientIds(rr::Ptr{Nothing})\n\nObtain the list of unscaled concentration control coefficient Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getUnscaledConcentrationControlCoefficientMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getUnscaledConcentrationControlCoefficientMatrix","text":"getUnscaledConcentrationControlCoefficientMatrix(rr::Ptr{Nothing})\n\nRetrieve the matrix of unscaled concentration control coefficients for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getUnscaledElasticityMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getUnscaledElasticityMatrix","text":"getUnscaledElasticityMatrix(rr::Ptr{Nothing})\n\nRetrieve the unscaled elasticity matrix for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getUnscaledFluxControlCoefficientIds-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getUnscaledFluxControlCoefficientIds","text":"getUnscaledFluxControlCoefficientIds(rr::Ptr{Nothing})\n\nObtain the list of unscaled flux control coefficient Ids.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getUnscaledFluxControlCoefficientMatrix-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getUnscaledFluxControlCoefficientMatrix","text":"getUnscaledFluxControlCoefficientMatrix(rr::Ptr{Nothing})\n\nRetrieve the matrix of unscaled flux control coefficients for the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getValue-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.getValue","text":"getValue(rr::Ptr{Nothing}, symbolId::String)\n\nGet the value for a given symbol, use getAvailableTimeCourseSymbols(void) for a list of symbols. Example status = getValue (rrHandle, \"S1\", &value);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getVectorElement-Tuple{Ptr{RoadRunner.RRVector},Int64}","page":"Home","title":"RoadRunner.getVectorElement","text":"getVectorElement(vector::Ptr{RRVector}, index::Int64)\n\nGet a particular element from a vector.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getVectorLength-Tuple{Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.getVectorLength","text":"getVectorLength(vector::Ptr{RRVector})\n\nGet the number of elements in a vector type.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getVersion-Tuple{}","page":"Home","title":"RoadRunner.getVersion","text":"getVersion()\n\nGet the version number. Return the roadrunner version number in the form or 102030 if the number is 1.2.3 return the individual version numbers as XXYYZZ where XX is the major version, YY the minor and ZZ the revision, eg 10000, or 10100, 20000 etc\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getVersionEx-Tuple{}","page":"Home","title":"RoadRunner.getVersionEx","text":"getVersionEx()\n\nreturn something like \"1.0.0; compiled with clang \"3.3 (tags/RELEASE_33/final)\" on date Dec 8 2013, 17:24:57'\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getVersionStr-Tuple{}","page":"Home","title":"RoadRunner.getVersionStr","text":"getVersionStr()\n\nreturn roadrunner as a string, i.e. \"1.0.0\"\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getWarnings-Tuple{}","page":"Home","title":"RoadRunner.getWarnings","text":"getWarnings() When translating some other format to Antimony, elements that are unable to be translated are saved as warnings, retrievable with this function (returns NULL if no warnings present).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getWorkingDirectory-Tuple{}","page":"Home","title":"RoadRunner.getWorkingDirectory","text":"getWorkingDirectory()\n\nRetrieve the current working directory path.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getZEigenVectors-Tuple{Ptr{RoadRunner.RRComplexMatrix}}","page":"Home","title":"RoadRunner.getZEigenVectors","text":"getZEigenVectors(matrix::Ptr{RRComplexMatrix})\n\nCalculate the eigen-vectors of a square nonsymmetrix complex matrix. This function calculates the complex (right)eigenvectors of the given real matrix. The complex matrix returned contains the eigenvectors in the columns, in the same order as getZEigenValues. The right eigenvector v(j) of A satisfies: A * v(j) = lambda(j) * v(j)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getlibSBMLVersion-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.getlibSBMLVersion","text":"getlibSBMLVersion(rr::Ptr{Nothing})\n\nRetrieve info about current state of roadrunner, e.g. loaded model, conservationAnalysis etc.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getuCC-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.getuCC","text":"getuCC(rr::Ptr{Nothing}, variable::String, parameter::String)\n\nRetrieve a single unscaled control coefficient.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.getuEE-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.getuEE","text":"getuEE(rr::Ptr{Nothing}, name::String, species::String)\n\nRetrieve a single unscaled elasticity coefficient.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespie-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.gillespie","text":"gillespie(rr::Ptr{Nothing})\n\nCarry out a time-course simulation using the Gillespie algorithm with variable step size. setTimeStart, setTimeEnd, etc are used to set the simulation characteristics.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieEx-Tuple{Ptr{Nothing},Float64,Float64}","page":"Home","title":"RoadRunner.gillespieEx","text":"gillespieEx(rr::Ptr{Nothing}, timeStart::Float64, timeEnd::Float64)\n\nCarry out a time-course simulation using the Gillespie algorithm with variable step size. setTimeStart, setTimeEnd, etc are used to set the simulation characteristics.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieMeanOnGrid-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.gillespieMeanOnGrid","text":"gillespieMeanOnGrid(rr::Ptr{Nothing}, numberOfSimulations::Int64)\n\nCarry out a series of time-course simulations using the Gillespie algorithm with fixed step size, then return the average of the simulations. setTimeStart, setTimeEnd, setNumPoints, etc are used to set the simulation characteristics.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieMeanOnGridEx-Tuple{Ptr{Nothing},Float64,Float64,Int64,Int64}","page":"Home","title":"RoadRunner.gillespieMeanOnGridEx","text":"gillespieMeanOnGridEx(rr::Ptr{Nothing}, timeStart::Float64, timeEnd::Float64, numberOfPoints::Int64, numberOfSimulations::Int64)\n\nCarry out a series of time-course simulations using the Gillespie algorithm with fixed step size, then return the average of the simulations. Based on the given arguments, time start, time end, and number of points. Example:     1 RRCDataPtr m;     2 double timeStart = 0.0;     3 double timeEnd = 25;     4 int numberOfPoints = 200;     5 int numberOfSimulations = 10;     6 m = gillespieMeanOnGridEx (rrHandle, timeStart, timeEnd, numberOfPoints, numberOfSimulations);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieMeanSDOnGrid-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.gillespieMeanSDOnGrid","text":"gillespieMeanSDOnGrid(rr::Ptr{Nothing}, numberOfSimulations::Int64)\n\nCarry out a series of time-course simulations using the Gillespie algorithm with fixed step size, then return the average and standard deviation of the simulations. setTimeStart, setTimeEnd, setNumPoints, etc are used to set the simulation characteristics.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieMeanSDOnGridEx-Tuple{Ptr{Nothing},Float64,Float64,Int64,Int64}","page":"Home","title":"RoadRunner.gillespieMeanSDOnGridEx","text":"gillespieMeanSDOnGridEx(rr::Ptr{Nothing}, timeStart::Float64, timeEnd::Float64, numberOfPoints::Int64, numberOfSimulations::Int64)\n\nCarry out a series of time-course simulations using the Gillespie algorithm with fixed step size, then return the average and standard deviation of the simulations. Based on the given arguments, time start, time end, number of points, and number of simulations. Example:     1 RRCDataPtr m;     2 double timeStart = 0.0;     3 double timeEnd = 25;     4 int numberOfPoints = 200;     5 int numberOfSimulations = 10;     6 m = gillespieMeanSDOnGridEx (rrHandle, timeStart, timeEnd, numberOfPoints, numberOfSimulations);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieOnGrid-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.gillespieOnGrid","text":"gillespieOnGrid(rr::Ptr{Nothing})\n\nCarry out a time-course simulation using the Gillespie algorithm based on the given arguments, time start, time end and number of points. Example:     1 RRCDataPtr m;     2 double timeStart = 0.0;     3 double timeEnd = 25;     4 m = gillespieEx (rrHandle, timeStart, timeEnd);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.gillespieOnGridEx-Tuple{Ptr{Nothing},Float64,Float64,Int64}","page":"Home","title":"RoadRunner.gillespieOnGridEx","text":"gillespieOnGridEx(rr::Ptr{Nothing}, timeStart::Float64, timeEnd::Float64, numberOfPoints::Int64)\n\nCarry out a time-course simulation using the Gillespie algorithm with fixed step size based on the given arguments, time start, time end, and number of points. Example:     1 RRCDataPtr m;     2 double timeStart = 0.0;     3 double timeEnd = 25;     4 int numberOfPoints = 200;     5 m = gillespieOnGridEx (rrHandle, timeStart, timeEnd, numberOfPoints);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.hasError-Tuple{}","page":"Home","title":"RoadRunner.hasError","text":"hasError()\n\nCheck if there is an error string to retrieve. Example: status = hasError (void)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isListItem-Tuple{Ptr{RoadRunner.RRListItem},Any}","page":"Home","title":"RoadRunner.isListItem","text":"isListItem(item::Ptr{RRListItem}, itemType)\n\nReturns true or false if the list item is the given itemType.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isListItemDouble-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.isListItemDouble","text":"isListItemDouble(item::Ptr{RRListItem})\n\nReturn true or false if the list item is a double.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isListItemInteger-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.isListItemInteger","text":"isListItemInteger(item::Ptr{RRListItem})\n\nReturn true or false if the list item is an integer.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isListItemList-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.isListItemList","text":"isListItemList(item::Ptr{RRListItem})\n\nReturn true or false if the list item is a list itself.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isListItemString-Tuple{Ptr{RoadRunner.RRListItem}}","page":"Home","title":"RoadRunner.isListItemString","text":"isListItemString(item::Ptr{RRListItem})\n\nReturn true or false if the list item is a character array.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.isModelLoaded-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.isModelLoaded","text":"isModelLoaded(rr::Ptr{Nothing})\n\ncheck if a model is loaded\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.listToString-Tuple{Ptr{RoadRunner.RRList}}","page":"Home","title":"RoadRunner.listToString","text":"listToString(list::Ptr{RRList})\n\nReturns a list in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadAntimonyFile-Tuple{String}","page":"Home","title":"RoadRunner.loadAntimonyFile","text":"loadAntimonyFile(filename::String) Loads a file and parses it as an Antimony file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadAntimonyString-Tuple{String}","page":"Home","title":"RoadRunner.loadAntimonyString","text":"loadAntimonyString(antModel::String) Loads a string and parses it as an Antimony set of modules.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadCellMLFile-Tuple{String}","page":"Home","title":"RoadRunner.loadCellMLFile","text":"loadCellMLFile(filename::String) Load a file known to be CellML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadCellMLString-Tuple{String}","page":"Home","title":"RoadRunner.loadCellMLString","text":"loadCellMLString(model::String) Load a string known to be CellML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadFile-Tuple{String}","page":"Home","title":"RoadRunner.loadFile","text":"loadFile(filename::String) Load a file of any format libAntimony knows about (potentially Antimony, SBML, or CellML).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBML-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.loadSBML","text":"loadSBML(rr::Ptr{Nothing}, sbml::String)\n\nLoad a model from an SBML string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLEx-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.loadSBMLEx","text":"loadSBMLEx(rr::Ptr{Nothing}, sbml::String, forceRecompile::Bool)\n\nLoad a model from an SBML string.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLFile-Tuple{String}","page":"Home","title":"RoadRunner.loadSBMLFile","text":"loadSBMLFile(filename::String) Load a file known to be SBML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLFromFile-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.loadSBMLFromFile","text":"loadSBMLFromFile(rr::Ptr{Nothing}, fileName::String)\n\nLoad a model from a SBML file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLFromFileE-Tuple{Nothing,String,Bool}","page":"Home","title":"RoadRunner.loadSBMLFromFileE","text":"loadSBMLFromFile(rr::Nothing, fileName::String, forceRecompile::Bool)\n\nLoad a model from a SBML file, force recompilation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLString-Tuple{String}","page":"Home","title":"RoadRunner.loadSBMLString","text":"loadSBMLString(model::String) Load a string known to be SBML.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSBMLStringWithLocation-Tuple{String,String}","page":"Home","title":"RoadRunner.loadSBMLStringWithLocation","text":"loadSBMLStringWithLocation(model::String, location::String) Load a string known to be SBML with its file location.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadSimulationSettings-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.loadSimulationSettings","text":"loadSimulationSettings(rr::Ptr{Nothing}, fileName::String)\n\nLoad simulation settings from a file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loadString-Tuple{String}","page":"Home","title":"RoadRunner.loadString","text":"loadString(model::String) Load a string of any format libAntimony knows about (potentially Antimony, SBML, or CellML).\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.loada-Tuple{String}","page":"Home","title":"RoadRunner.loada","text":"loada(antString::String)\n\nTake an antimony string and return a roadrunner instance\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.logMsg-Tuple{Any,Any}","page":"Home","title":"RoadRunner.logMsg","text":"logMsg()\n\nCreate a log message.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.matrixToString-Tuple{Ptr{RoadRunner.RRDoubleMatrix}}","page":"Home","title":"RoadRunner.matrixToString","text":"matrixToString(matrixHandle::Ptr{RRDoubleMatrix})\n\nReturns a matrix in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.oneStep-Tuple{Ptr{Nothing},Float64,Float64}","page":"Home","title":"RoadRunner.oneStep","text":"oneStep(rr::Ptr{Nothing}, currentTime::Float64, stepSize::Float64)\n\nCarry out a one step integration of the model. Example: status = OneStep (rrHandle, currentTime, timeStep, newTimeStep);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.printAllDataFor-Tuple{String}","page":"Home","title":"RoadRunner.printAllDataFor","text":"printAllDataFor(moduleName::String) An example function that will print to stdout all the information in the given module.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeCompartment-Tuple{Any,String,Bool}","page":"Home","title":"RoadRunner.removeCompartment","text":"removeCompartment(rr, cid::String, regen::Bool)\n\nRemove a compartment from the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeEvent-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.removeEvent","text":"removeEvent(rr::Ptr{Nothing}, eid::String, forceRegen::Bool)\n\nRemove an event from the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeEventAssignments-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.removeEventAssignments","text":"removeEventAssignments(rr::Ptr{Nothing}, eid::String, vid::String, forceRegen::Bool)\n\nAdd all event assignments for a variable from an existing event in the model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeParameter-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.removeParameter","text":"removeParameter(rr::Ptr{Nothing}, pid::String, forceRegen::Bool)\n\nRemove a parameter from the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeReaction-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.removeReaction","text":"removeReaction(rr::Ptr{Nothing}, rid::String, regen::Bool)\n\nRemove a reaction from the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeRules-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.removeRules","text":"removeRules(rr::Ptr{Nothing}, vid::String, forceRegen::Bool)\n\nRemove all rules for a variable from the current model, including assignment and rate rules.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.removeSpecies-Tuple{Ptr{Nothing},String,Bool}","page":"Home","title":"RoadRunner.removeSpecies","text":"removeSpecies(rr::Ptr{Nothing}, sid::String, regen::Bool)\n\nRemove a species from the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.reset-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.reset","text":"resetRR(rr::Ptr{Nothing})\n\nReset all variables of the model to their current initial values. Does not change the parameters.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.resetAll-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.resetAll","text":"resetAll(rr::Ptr{Nothing})\n\nReset all variables of the model to their current initial values, and resets all parameters to their original values.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.resetCurrentIntegratorParameters-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.resetCurrentIntegratorParameters","text":"resetCurrentIntegratorParameters(rr::Ptr{Nothing})\n\nReset the integrator parameters to their default values.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.resetCurrentSteadyStateSolverParameters-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.resetCurrentSteadyStateSolverParameters","text":"resetCurrentSteadyStateSolverParameters(rr::Ptr{Nothing})\n\nReset the steady state solver parameters to their default values.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.resetToOrigin-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.resetToOrigin","text":"resetToOriginRR(rr::Ptr{Nothing})\n\nReset the model to the state in which it was first loaded, including initial conditions, variables, and parameters.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.revertTo-Tuple{Any}","page":"Home","title":"RoadRunner.revertTo","text":"revertTo(Index) Change the 'active' set of modules to the ones from the given index (as received from 'load<file/string>').\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.rrCDataToString-Tuple{Ptr{RoadRunner.RRCData}}","page":"Home","title":"RoadRunner.rrCDataToString","text":"rrCDataToString(rrData::Ptr{RRCData})\n\nReturns a rrCData struct in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setBoundary-Tuple{Ptr{Nothing},String,Bool,Bool}","page":"Home","title":"RoadRunner.setBoundary","text":"setBoundary(rr::Ptr{Nothing}, sid::String, boundaryCondition::Bool, forceRegen::Bool)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setBoundarySpeciesByIndex-Tuple{Ptr{Nothing},Int64,Float64}","page":"Home","title":"RoadRunner.setBoundarySpeciesByIndex","text":"setBoundarySpeciesByIndex(rr::Ptr{Nothing}, index::Int64, value::Float64)\n\nSet the concentration for a particular boundary species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setBoundarySpeciesConcentrations-Tuple{Ptr{Nothing},Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.setBoundarySpeciesConcentrations","text":"setBoundarySpeciesConcentrations(rr::Ptr{Nothing}, vec::Ptr{RRVector})\n\nSet the boundary species concentration to the vector vec. Example:     1 myVector = createVector (getNumberOfBoundarySpecies(RRHandle handle));     2 setVectorElement (myVector, 0, 1.2);     3 setVectorElement (myVector, 1, 5.7);     4 setVectorElement (myVector, 2, 3.4);     5 setBoundarySpeciesConcentrations(myVector);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCodeGenerationMode-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.setCodeGenerationMode","text":"setCodeGenerationMode(rr::Ptr{Nothing}, mode::Int64)\n\nSet the runtime generation option [Not yet implemented]. RoadRunner can either execute a model by generating, compiling and linking self-generated C code or it can employ an internal interpreter to evaluate the model equations. The later method is useful when the OS forbids the compiling of externally generated code.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCompartmentByIndex-Tuple{Ptr{Nothing},Int64,Float64}","page":"Home","title":"RoadRunner.setCompartmentByIndex","text":"setCompartmentByIndex(rr::Ptr{Nothing}, index::Int64, value::Float64)\n\nSet the volume for a particular compartment.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCompiler-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setCompiler","text":"setCompiler(rr::Ptr{Nothing}, fName::String)\n\nSet the path and filename to the compiler to be used by roadrunner.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCompilerLocation-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setCompilerLocation","text":"setCompilerLocation(rr::Ptr{Nothing}, folder::String)\n\nSet the path to a folder containing the compiler being used. Returns true if successful\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setComplexMatrixElement-Tuple{Ptr{RoadRunner.RRComplexMatrix},Int64,Int64,Float64}","page":"Home","title":"RoadRunner.setComplexMatrixElement","text":"setComplexMatrixElement(m::Ptr{RRComplexMatrix}, r::Int64, c::Int64, value::Float64)\n\nSet an element at a given row and column with a given value in a complex matrix type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setComputeAndAssignConservationLaws-Tuple{Ptr{Nothing},Bool}","page":"Home","title":"RoadRunner.setComputeAndAssignConservationLaws","text":"setComputeAndAssignConservationLaws(rr::Ptr{Nothing}, OnOrOff::Bool)\n\nEnable or disable conservation analysis.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setConfigBool-Tuple{String,Bool}","page":"Home","title":"RoadRunner.setConfigBool","text":"setConfigBool(key::String, value::Bool)\nSet a boolean configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setConfigDouble-Tuple{String,Float64}","page":"Home","title":"RoadRunner.setConfigDouble","text":"setConfigDouble(key::String, value::Float64)\n\nSet a double configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setConfigInt-Tuple{String,Int64}","page":"Home","title":"RoadRunner.setConfigInt","text":"setConfigInt(key::String, value::Int64)\n\nSet an integer configuration value.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setConfigurationXML-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setConfigurationXML","text":"setConfigurationXML(rr::Ptr{Nothing}, caps::String)\n\nSet the simulator's capabilities.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegrator-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setCurrentIntegrator","text":"setCurrentIntegrator(rr::Ptr{Nothing}, nameOfIntegrator::String)\n\nSpecify the current integrator to be used for simulation. This method instantiates a new integrator of the given type (e.g. cvode, gillespie) if one does not currently exist. Otherwise, the existing integrator of this type is used.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegratorParameterBoolean-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentIntegratorParameterBoolean","text":"setCurrentIntegratorParameterBoolean(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the boolean value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegratorParameterDouble-Tuple{Ptr{Nothing},String,Float64}","page":"Home","title":"RoadRunner.setCurrentIntegratorParameterDouble","text":"setCurrentIntegratorParameterDouble(rr::Ptr{Nothing}, parameterName::String, value::Float64)\n\nSet the double value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegratorParameterInt-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentIntegratorParameterInt","text":"setCurrentIntegratorParameterInt(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the integer value for a specific integrator setting\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegratorParameterString-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.setCurrentIntegratorParameterString","text":"setCurrentIntegratorParameterString(rr::Ptr{Nothing}, parameterName::String, value::String)\n\nSet the string value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentIntegratorParameterUInt-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentIntegratorParameterUInt","text":"setCurrentIntegratorParameterUInt(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the unsigned integer value for a specific integrator setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolver-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolver","text":"setCurrentSteadyStateSolver(rr::Ptr{Nothing}, nameOfSteadyStateSolver::String)\n\nSpecify the current steady state solver to be used for simulation. This method instantiates a new steady state solver of the given type (e.g. cvode, gillespie) if one does not currently exist. Otherwise, the existing steady state solver of this type is used.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolverParameterBoolean-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolverParameterBoolean","text":"setCurrentSteadyStateSolverParameterBoolean(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the boolean value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolverParameterDouble-Tuple{Ptr{Nothing},String,Float64}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolverParameterDouble","text":"setCurrentSteadyStateSolverParameterDouble(rr::Ptr{Nothing}, parameterName::String, value::Float64)\n\nSet the double value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolverParameterInt-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolverParameterInt","text":"setCurrentSteadyStateSolverParameterInt(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the integer value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolverParameterString-Tuple{Ptr{Nothing},String,String}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolverParameterString","text":"setCurrentSteadyStateSolverParameterString(rr::Ptr{Nothing}, parameterName::String, value::String)\n\nSet the string value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setCurrentSteadyStateSolverParameterUInt-Tuple{Ptr{Nothing},String,Int64}","page":"Home","title":"RoadRunner.setCurrentSteadyStateSolverParameterUInt","text":"setCurrentSteadyStateSolverParameterUInt(rr::Ptr{Nothing}, parameterName::String, value::Int64)\n\nSet the unsigned integer value for a specific steady state solver setting.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setFloatingSpeciesByIndex-Tuple{Ptr{Nothing},Int64,Float64}","page":"Home","title":"RoadRunner.setFloatingSpeciesByIndex","text":"setFloatingSpeciesByIndex(rr::Ptr{Nothing}, index::Int64, value::Float64)\n\nSet the concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setFloatingSpeciesConcentrations-Tuple{Ptr{Nothing},Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.setFloatingSpeciesConcentrations","text":"setFloatingSpeciesConcentrations(rr::Ptr{Nothing}, vec::Ptr{RRVector})\n\nSet the floating species concentration to the vector vec. Example:     1 myVector = createVector (getNumberOfFloatingSpecies(RRHandle handle));     2 setVectorElement (myVector, 0, 1.2);     3 setVectorElement (myVector, 1, 5.7);     4 setVectorElement (myVector, 2, 3.4);     5 setFloatingSpeciesConcentrations(myVector);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setFloatingSpeciesInitialConcentrationByIndex-Tuple{Ptr{Nothing},Int64,Float64}","page":"Home","title":"RoadRunner.setFloatingSpeciesInitialConcentrationByIndex","text":"setFloatingSpeciesInitialConcentrationByIndex(rr::Ptr{Nothing}, index::Int64, value::Float64)\n\nSet the initial concentration for a particular floating species.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setFloatingSpeciesInitialConcentrations-Tuple{Ptr{Nothing},Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.setFloatingSpeciesInitialConcentrations","text":"setFloatingSpeciesInitialConcentrations(rr::Ptr{Nothing}, vec::Ptr{RRVector})\n\nSet the initial floating species concentrations. Example: status = setFloatingSpeciesInitialConcentrations (vec);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setGlobalParameterByIndex-Tuple{Ptr{Nothing},Int64,Float64}","page":"Home","title":"RoadRunner.setGlobalParameterByIndex","text":"setGlobalParameterByIndex(rr::Ptr{Nothing}, index::Int64, value::Float64)\n\nSet the value for a particular global parameter.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setInstallFolder-Tuple{String}","page":"Home","title":"RoadRunner.setInstallFolder","text":"getInstallFolder(folder::String)\n\nSet the internal string containing the folder in where the RoadRunner C API is installed.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setKineticLaw-Tuple{Ptr{Nothing},String,String,Bool}","page":"Home","title":"RoadRunner.setKineticLaw","text":"setKineticLaw(rr::Ptr{Nothing}, rid::String, kineticLaw::String, forceRegen::Bool)\n\nSet the kinetic law for an existing reaction in the current model.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setLogLevel-Tuple{String}","page":"Home","title":"RoadRunner.setLogLevel","text":"setLogLevel(lvl::String)\n\nSet the logging status level The logging level is determined by the following strings. \"ANY\", \"DEBUG5\", \"DEBUG4\", \"DEBUG3\", \"DEBUG2\", \"DEBUG1\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\" Example: setLogLevel (\"DEBUG4\")\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setMatrixElement-Tuple{Ptr{RoadRunner.RRDoubleMatrix},Int64,Int64,Float64}","page":"Home","title":"RoadRunner.setMatrixElement","text":"setMatrixElement(m::Ptr{RRDoubleMatrix}, r::Int64, c::Int64, value::Float64)\n\nSet an element at a given row and column with a given value in a matrix type variable.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setNumPoints-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.setNumPoints","text":"setNumPoints(rr::Ptr{Nothing}, nrPoints::Int64)\n\nSet the number of points to generate in a time course simulation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setSeed-Tuple{Ptr{Nothing},Int64}","page":"Home","title":"RoadRunner.setSeed","text":"setSeed(rr::Ptr{Nothing}, result::Int64)\n\nDetermine the current seed used by the random generator.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setSteadyStateSelectionList-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setSteadyStateSelectionList","text":"setSteadyStateSelectionList(rr::Ptr{Nothing}, list::String)\n\nSet the selection list of the steady state analysis.Use getAvailableTimeCourseSymbols(void) to retrieve the list of all possible symbols. Example:  setSteadyStateSelectionList (\"S1, J1, J2\") or setSteadyStateSelectionList (\"S1 J1 J2\")\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setSupportCodeFolder-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setSupportCodeFolder","text":"setSupportCodeFolder(rr::Ptr{Nothing}, folder::String)\n\nSet the path to a folder containing support code for model generation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setTempFolder-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setTempFolder","text":"setTempFolder(rr::Ptr{Nothing}, folder::String)\n\nSet the path to the temporary folder where the C code will be stored. When RoadRunner is run in C generation mode it uses a temporary folder to store the generated C source code. This method can be used to set the temporary folder path if necessary.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setTimeCourseSelectionList-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.setTimeCourseSelectionList","text":"setTimeCourseSelectionList(rr::Ptr{Nothing}, list::String)\n\nSet the selection list for output from simulate(void) or simulateEx(void). Use getAvailableTimeCourseSymbols(void) to retrieve the list of all possible symbols. Example: setTimeCourseSelectionList (\"Time, S1, J1, J2\"); or setTimeCourseSelectionList (\"Time S1 J1 J2\")\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setTimeEnd-Tuple{Ptr{Nothing},Number}","page":"Home","title":"RoadRunner.setTimeEnd","text":"setTimeEnd(rr::Ptr{Nothing}, timeEnd::Number)\n\nSet the time end for a time course simulation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setTimeStart-Tuple{Ptr{Nothing},Number}","page":"Home","title":"RoadRunner.setTimeStart","text":"setTimeStart(rr::Ptr{Nothing}, timeStart::Number)\n\nSet the time start for a time course simulation.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setValue-Tuple{Ptr{Nothing},String,Float64}","page":"Home","title":"RoadRunner.setValue","text":"setValue(rr::Ptr{Nothing}, symbolId::String, value::Float64)\n\nSet the value for a given symbol, use getAvailableTimeCourseSymbols(void) for a list of symbols. Example: status = setValue (rrHandle, \"S1\", 0.5);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.setVectorElement-Tuple{Ptr{RoadRunner.RRVector},Int64,Float64}","page":"Home","title":"RoadRunner.setVectorElement","text":"setVectorElement(vector::Ptr{RRVector}, index::Int64, value::Float64)\n\nSet a particular element in a vector.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.simulateEx-Tuple{Ptr{Nothing},Number,Number,Int64}","page":"Home","title":"RoadRunner.simulateEx","text":"simulateEx(rr::Ptr{Nothing}, startTime::Number, endTime::Number, setNumPoints::Int)\n\nCarry out a time-course simulation based on the given arguments, time start, time end and number of points.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.solverTypeToString-Tuple{Int64}","page":"Home","title":"RoadRunner.solverTypeToString","text":"solverTypeToString(code::Int64)\n\nCompute the eigenvalues of a double matrix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.steadyState-Tuple{Ptr{Nothing}}","page":"Home","title":"RoadRunner.steadyState","text":"steadyState(rr::Ptr{Nothing})\n\nCompute the steady state of the current model. Example: status = steadyState (rrHandle, &closenessToSteadyState);\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.stringArrayToString-Tuple{Ptr{RoadRunner.RRStringArray}}","page":"Home","title":"RoadRunner.stringArrayToString","text":"stringArrayToString(list::Ptr{RRStringArray})\n\nReturns a string list in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.vectorToString-Tuple{Ptr{RoadRunner.RRVector}}","page":"Home","title":"RoadRunner.vectorToString","text":"vectorToString(vecHandle::Ptr{RRVector})\n\nReturns a vector in string form.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.writeAntimonyFile-Tuple{String,String}","page":"Home","title":"RoadRunner.writeAntimonyFile","text":"writeAntimonyFile(filename::String, moduleName::String) Writes out an antimony-formatted file containing the given module.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.writeCellMLFile-Tuple{String,String}","page":"Home","title":"RoadRunner.writeCellMLFile","text":"writeCellMLFile(filename::String, moduleName::String) Writes out a CellML-formatted XML file to the file indicated, retaining the same Antimony hierarchy using the CellML 'component' hieararchy.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.writeCompSBMLFile-Tuple{String,String}","page":"Home","title":"RoadRunner.writeCompSBMLFile","text":"writeCompSBMLFile(filename::String, moduleName::String) Writes out a SBML-formatted XML file to the file indicated, using the 'Hierarchichal Model Composition' package\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.writeRRData-Tuple{Ptr{Nothing},String}","page":"Home","title":"RoadRunner.writeRRData","text":"writeRRData(rr::Ptr{Nothing}, fileNameAndPath::String)\n\nWrites RoadRunner data to file.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RoadRunner.writeSBMLFile-Tuple{String,String}","page":"Home","title":"RoadRunner.writeSBMLFile","text":"writeSBMLFile(filename::String, moduleName::String) Writes out a SBML-formatted XML file to the file indicated.\n\n\n\n\n\n","category":"method"}]
}
